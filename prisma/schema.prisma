generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model invite {
  id                           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                       String     @db.VarChar(50)
  inviter_id                   String     @db.Uuid
  invitee_id                   String     @db.Uuid
  restaurant_id                String     @db.Uuid
  created_at                   DateTime   @default(now()) @db.Timestamp(6)
  updated_at                   DateTime   @default(now()) @db.Timestamp(6)
  user_invite_invitee_idTouser user       @relation("invite_invitee_idTouser", fields: [invitee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invite_inviter_idTouser user       @relation("invite_inviter_idTouser", fields: [inviter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurant                   restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model menu {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(100)
  price         Int
  ingredients   String     @db.VarChar(500)
  category      String     @db.VarChar(100)
  restaurant_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reservation {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date             DateTime   @db.Date
  time             DateTime   @db.Time(6)
  number_of_guests Int
  user_id          String     @db.Uuid
  restaurant_id    String     @db.Uuid
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model restaurant {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?       @db.VarChar(500)
  location      String?       @db.VarChar(100)
  opening_hours String?       @db.VarChar(100)
  closing_hours String?       @db.VarChar(100)
  name          String        @db.VarChar(255)
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  user_id       String        @db.Uuid
  tenant_id     String        @db.VarChar(255)
  invite        invite[]
  menu          menu[]
  reservation   reservation[]
  user          user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                          String        @unique @db.VarChar(255)
  firstName                      String?       @db.VarChar(255)
  lastName                       String?       @db.VarChar(255)
  roq_user_id                    String        @db.VarChar(255)
  tenant_id                      String        @db.VarChar(255)
  created_at                     DateTime      @default(now()) @db.Timestamp(6)
  updated_at                     DateTime      @default(now()) @db.Timestamp(6)
  invite_invite_invitee_idTouser invite[]      @relation("invite_invitee_idTouser")
  invite_invite_inviter_idTouser invite[]      @relation("invite_inviter_idTouser")
  reservation                    reservation[]
  restaurant                     restaurant[]
}
